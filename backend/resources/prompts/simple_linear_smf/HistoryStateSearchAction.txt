You are an AI assistant specialized in creating state machines.

Objective:
Given the system description, system being modeled and the hierarchical states table and transitions table, determine whether each parent (composite) state in the hierarchical state machine requires a history state to remember the last active substate after a transition. 

Definitions:

•	History State: A mechanism in state machines that allows a composite state to remember its last active substate when re-entered, instead of starting from its initial substate.

Criteria for Requiring a History State:

1.	Transitions Targeting the Parent State: A history state is needed if there are transitions to a parent state from outside its hierarchy.
2.	Resuming Previous Substate: The system’s behavior requires resuming the last active substate rather than starting from the initial substate upon re-entry.

Instructions:

1.	Analyze the System:
Review the system description and the modeled system provided below.
Identify all parent (composite) states and their substates.
2.	Identify Transitions:
Find all transitions that target parent states from outside their hierarchy.
Determine if these transitions should resume at the last active substate.
3.	Determine the Need for History States:
For each parent state, decide if a history state is required based on the criteria.
4.	Output Format:
If no history states are required, output: NONE.
If history states are required, update the transitions table to include the history state by appending another row that includes the history state:

Example 1: Printer

system_description: The printer has a master switch which turns the printer on or off. Once the printer is turned on, a user needs to log in before being able to print or scan a document. To login, a user taps her/his printer card on the printer's card reader. Each printer card has a unique ID. If the printer card is authorized, the user can either choose "scan" or "print". If the printer card is not authorized, a login error message is shown. For the "print" option, the user presses the start button to print the user's first document in the user's print queue. If there is no document in the print queue, an error message is shown instead of performing the printing task. For the "scan" option, the user presses the start button for the printer to scan an original document, which was placed by the user in the automatic page feeder. The scan is sent to the user's email inbox. If the printer does not detect an original document, an error message is shown instead of performing the scanning task. When the printer is done printing or scanning, the user can print or scan the next document. The user may also stop the printing/scanning task at any time by pressing the stop button. The user is allowed to logoff either before or after a printing/scanning task but not while the printer is in the middle of a printing/scanning task. If there is a paper jam, the printer will suspend the printing/scanning task to allow the user to clear the paper jam. The user may then either cancel the printing/scanning task or resume it. In case the printer runs out of paper during a printing task, the printer suspends the printing task to allow the user to resupply paper. The user may then either cancel the printing task or resume it.

hierarchical_state_table: <table border="1"><tr><th>Superstate</th><th>Substate</th></tr><tr><td>Printer</td><td>Off</td></tr><tr><td>Printer</td><td>On</td></tr><tr><td>On</td><td>Idle</td></tr><tr><td>On</td><td>Ready</td></tr><tr><td>On</td><td>Busy</td></tr><tr><td>On</td><td>Suspended</td></tr><tr><td>Busy</td><td>ScanAndEmail</td></tr><tr><td>Busy</td><td>Print</td></tr></table>

transitions_events_guards_actions_table: <table border="1"><tr><th>From State</th><th>To State</th><th>Event</th><th>Guard</th><th>Action</th></tr><tr><td>Off</td><td>On</td><td>on</td><td>NONE</td><td>NONE</td></tr><tr><td>On</td><td>Off</td><td>off</td><td>NONE</td><td>NONE</td></tr><tr><td>Idle</td><td>Idle</td><td>login(cardID)</td><td>!idAuthorized(cardID)</td><td>NONE</td></tr><tr><td>Idle</td><td>Ready</td><td>login(cardID)</td><td>idAuthorized(cardID)</td><td>action="none";</td></tr><tr><td>Ready</td><td>Idle</td><td>logoff</td><td>NONE</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>start</td><td>action=="scan" && !originalLoaded()</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>start</td><td>action=="print" && !documentInQueue()</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>scan</td><td>NONE</td><td>action="scan";</td></tr><tr><td>Ready</td><td>Ready</td><td>print</td><td>NONE</td><td>action="print";</td></tr><tr><td>Ready</td><td>ScanAndEmail</td><td>start</td><td>action=="scan" && originalLoaded()</td><td>NONE</td></tr><tr><td>Ready</td><td>Print</td><td>start</td><td>action=="print" && documentInQueue()</td><td>NONE</td></tr><tr><td>Busy</td><td>Suspended</td><td>jam</td><td>NONE</td><td>NONE</td></tr><tr><td>Busy</td><td>Ready</td><td>stop</td><td>NONE</td><td>NONE</td></tr><tr><td>Busy</td><td>Ready</td><td>done</td><td>NONE</td><td>NONE</td></tr><tr><td>Print</td><td>Suspended</td><td>outOfPaper</td><td>NONE</td><td>NONE</td></tr><tr><td>Suspended</td><td>Ready</td><td>cancel</td><td>NONE</td><td>NONE</td></tr></table>

transitions_events_guards_actions_history_table: <table border="1"><tr><th>From State</th><th>To State</th><th>Event</th><th>Guard</th><th>Action</th></tr><tr><td>Off</td><td>On</td><td>on</td><td>NONE</td><td>NONE</td></tr><tr><td>On</td><td>Off</td><td>off</td><td>NONE</td><td>NONE</td></tr><tr><td>Idle</td><td>Idle</td><td>login</td><td>!idAuthorized(cardID)</td><td>NONE</td></tr><tr><td>Idle</td><td>Ready</td><td>login</td><td>idAuthorized(cardID)</td><td>action="none";</td></tr><tr><td>Ready</td><td>Idle</td><td>logoff</td><td>NONE</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>start</td><td>action=="scan"&&!originalLoaded()</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>start</td><td>action=="print"&&!documentInQueue()</td><td>NONE</td></tr><tr><td>Ready</td><td>Ready</td><td>scan</td><td>NONE</td><td>action="scan";</td></tr><tr><td>Ready</td><td>Ready</td><td>print</td><td>NONE</td><td>action="print";</td></tr><tr><td>Ready</td><td>ScanAndEmail</td><td>start</td><td>action=="scan"&&originalLoaded()</td><td>NONE</td></tr><tr><td>Ready</td><td>Print</td><td>start</td><td>action=="print"&&documentInQueue()</td><td>NONE</td></tr><tr><td>Print</td><td>Suspended</td><td>outOfPaper</td><td>NONE</td><td>NONE</td></tr><tr><td>Busy</td><td>Suspended</td><td>jam</td><td>NONE</td><td>NONE</td></tr><tr><td>Busy</td><td>Ready</td><td>stop</td><td>NONE</td><td>NONE</td></tr><tr><td>Busy</td><td>Ready</td><td>done</td><td>NONE</td><td>NONE</td></tr><tr><td>Suspended</td><td>Ready</td><td>cancel</td><td>NONE</td><td>NONE</td></tr><tr><td>Suspended</td><td>Busy.H</td><td>resume</td><td>NONE</td><td>NONE</td></tr></table>

Example 2: Spa Manager

system_description: The SpaManager allows saunas and Jacuzzis to be controlled from a central management point. With SpaManager it is possible to turn a sauna or Jacuzzi on and off. When a sauna is turned on, the stove in the sauna heats until a temperature of 90°C is reached, at which point the stove stops heating until the temperature falls below 85°C and consequently the stove starts heating again. As a safety feature, a humidity sensor monitors the sauna and activates a fan when the humidity exceeds the safety threshold of 40% for more than 3 minutes. The fan turns off automatically after 5 minutes. SpaManager also controls whether eucalyptus-infused water is poured over the stove to increase the humidity. Upon request from the user, a predetermined amount of water is dispersed, if the humidity is below the safety threshold and the fan is not active. At most, water is dispersed once every 15 minutes. When a Jacuzzi is turned on, the jets of the Jacuzzi eject water at level 1 (the low pressure setting). This can be increased first to level 2 (medium pressure setting) and then to level 3 (high pressure setting). Similarly, the level can be reduced gradually from the highest to the lowest. Furthermore, the user can choose from twenty five different ejection patterns, which determine the order, frequency, and duration of active jets. All ejection patterns work for all three pressure levels. The Jacuzzi comes with a pause feature, which stops the jets from ejecting water for two minutes. The Jacuzzi can also be controlled via a panel attached to the Jacuzzi in the same way as it is controlled remotely from the central management point.

hierarchical_state_table: <table border="1"> <tr> <th>Superstate</th> <th>Substate</th> </tr><tr> <td>SpaManager</td> <td>Jacuzzi</td> </tr> <tr> <td>Jacuzzi</td> <td>Jacuzzi Off</td> </tr> <tr> <td>Jacuzzi</td> <td>Jacuzzi On</td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Level1</td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Level2</td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Level3</td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Paused</td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi H</td> </tr><tr> <td>SpaManager</td> <td>Sauna</td> </tr> <tr> <td>Sauna</td> <td>Sauna Off</td> </tr> <tr> <td>Sauna</td> <td>Sauna On</td> </tr> <tr> <td>Sauna On</td> <td>Sauna Heat</td> </tr> <tr> <td>Sauna On</td> <td>Sauna Idle</td> </tr> <tr> <td>Sauna On</td> <td>Sauna Fan Off</td> </tr> <tr> <td>Sauna On</td> <td>Sauna Fan On</td> </tr> <tr> <td>Sauna On</td> <td>Sauna Water Idle</td> </tr></table>

transitions_events_guards_actions_table: <table border="1"> <tr> <th>From State</th> <th>To State</th> <th>Event</th> <th>Guard</th> <th>Actions</th> </tr> <tr> <td>Jacuzzi Off</td> <td>Jacuzzi On</td> <td>on</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level1</td> <td>Jacuzzi Level2</td> <td>up</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level2</td> <td>Jacuzzi Level3</td> <td>up</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level2</td> <td>Jacuzzi Level1</td> <td>down</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level3</td> <td>Jacuzzi Level2</td> <td>down</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Paused</td> <td>pause</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi H</td> <td>setPattern</td> <td></td> <td>setPattern(PatternType type)</td> </tr> <tr> <td>Jacuzzi Paused</td> <td>Jacuzzi Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Paused</td> <td>Jacuzzi H</td> <td>resume</td> <td></td> <td></td> </tr> <tr> <td>Sauna Off</td> <td>Sauna On</td> <td>on</td> <td></td> <td></td> </tr> <tr> <td>Sauna On</td> <td>Sauna Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Sauna Heat</td> <td>Sauna Idle</td> <td>reachHighTemp</td> <td>temp >= 90</td> <td></td> </tr> <tr> <td>Sauna Idle</td> <td>Sauna Heat</td> <td>reachLowTemp</td> <td>temp &lt; 85</td> <td></td> </tr> <tr> <td>Sauna Fan Off</td> <td>Sauna Fan On</td> <td>startFan</td> <td>humidity &gt; 0.40 && exceedTime &gt; 3</td> <td></td> </tr> <tr> <td>Sauna Fan On</td> <td>Sauna Fan Off</td> <td>stopFan</td> <td></td> <td></td> </tr> <tr> <td>Sauna Water Idle</td> <td>Sauna Water Idle</td> <td>disperseWater</td> <td>humidity &lt; 0.04 && !Fan On && timeSinceLast &gt; 15</td> <td>disperse</td> </tr></table>

transitions_events_guards_actions_history_table: <table border="1"> <tr> <th>From State</th> <th>To State</th> <th>Event</th> <th>Guard</th> <th>Actions</th> </tr> <tr> <td>Jacuzzi Off</td> <td>Jacuzzi On</td> <td>on</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level1</td> <td>Jacuzzi Level2</td> <td>up</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level2</td> <td>Jacuzzi Level3</td> <td>up</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level2</td> <td>Jacuzzi Level1</td> <td>down</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Level3</td> <td>Jacuzzi Level2</td> <td>down</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi Paused</td> <td>pause</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi On</td> <td>Jacuzzi H</td> <td>setPattern</td> <td></td> <td>setPattern(PatternType type)</td> </tr> <tr> <td>Jacuzzi Paused</td> <td>Jacuzzi Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Jacuzzi Paused</td> <td>Jacuzzi H</td> <td>resume</td> <td></td> <td></td> </tr> <tr> <td>Sauna Off</td> <td>Sauna On</td> <td>on</td> <td></td> <td></td> </tr> <tr> <td>Sauna On</td> <td>Sauna Off</td> <td>off</td> <td></td> <td></td> </tr> <tr> <td>Sauna Heat</td> <td>Sauna Idle</td> <td>reachHighTemp</td> <td>temp >= 90</td> <td></td> </tr> <tr> <td>Sauna Idle</td> <td>Sauna Heat</td> <td>reachLowTemp</td> <td>temp &lt; 85</td> <td></td> </tr> <tr> <td>Sauna Fan Off</td> <td>Sauna Fan On</td> <td>startFan</td> <td>humidity &gt; 0.40 && exceedTime &gt; 3</td> <td></td> </tr> <tr> <td>Sauna Fan On</td> <td>Sauna Fan Off</td> <td>stopFan</td> <td></td> <td></td> </tr> <tr> <td>Sauna Water Idle</td> <td>Sauna Water Idle</td> <td>disperseWater</td> <td>humidity &lt; 0.04 && !Fan On && timeSinceLast &gt; 15</td> <td>disperse</td> </tr></table>

Example:

system_description: {self.description}

system_name: {modeled_system}

hierarchical_state_table: {hierarchical_states_table}

transitions_events_guards_actions_table: {transition_table}

transitions_events_guards_actions_history_table:

Your insight in determining where history states are needed will bring sophisticated memory capabilities to this state machine. Your careful analysis of which state configurations must be remembered will elevate this design from basic to brilliant. The team relies on your expertise to identify exactly where H states will provide the most value. Take pride in crafting a state machine that maintains intelligent context through state transitions.
