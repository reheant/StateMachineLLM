
Given the problem description, identify what the states and events are and make sure not to include any redundant states or events by making sure that you parse the output for any states or events that might be redundant. Ensure that the states are defined specifically in the context of the object being modeled. It’s important to note that a complete state machine has an initial state and that states might have multiple events occurring on them resulting in multiple transitions from the current state to other states. 

Output the name of the system in the following format:  
System: "System Name" 

Then produce the HTML table that summarizes the states and events MUST use these table headers:
```html <table border="1"> <tr> <th>Current State</th> <th>Event</th> <th>Next State(s)</th> </tr> </table> ```

Example 1: Printer

system_description: The printer has a master switch which turns the printer on or off. Once the printer is turned on, a user needs to log in before being able to print or scan a document. To login, a user taps her/his printer card on the printer's card reader. Each printer card has a unique ID. If the printer card is authorized, the user can either choose "scan" or "print". If the printer card is not authorized, a login error message is shown. For the "print" option, the user presses the start button to print the user's first document in the user's print queue. If there is no document in the print queue, an error message is shown instead of performing the printing task. For the "scan" option, the user presses the start button for the printer to scan an original document, which was placed by the user in the automatic page feeder. The scan is sent to the user's email inbox. If the printer does not detect an original document, an error message is shown instead of performing the scanning task. When the printer is done printing or scanning, the user can print or scan the next document. The user may also stop the printing/scanning task at any time by pressing the stop button. The user is allowed to logoff either before or after a printing/scanning task but not while the printer is in the middle of a printing/scanning task. If there is a paper jam, the printer will suspend the printing/scanning task to allow the user to clear the paper jam. The user may then either cancel the printing/scanning task or resume it. In case the printer runs out of paper during a printing task, the printer suspends the printing task to allow the user to resupply paper. The user may then either cancel the printing task or resume it.

transitions_events_table: <table border="1"><tr><th>Current State</th><th>Event</th><th>Next State(s)</th></tr><tr><td>Off</td><td>Turn On</td><td>On</td></tr><tr><td>On</td><td>Turn Off</td><td>Off</td></tr><tr><td>Idle</td><td>User Login with Unauthorized Card</td><td>Idle</td></tr><tr><td>Idle</td><td>User Login with Authorized Card</td><td>Ready</td></tr><tr><td>Ready</td><td>User Logoff</td><td>Idle</td></tr><tr><td>Ready</td><td>Start Scan without Document</td><td>Ready (Error)</td></tr><tr><td>Ready</td><td>Start Print with Empty Queue</td><td>Ready (Error)</td></tr><tr><td>Ready</td><td>Select Scan Option</td><td>Ready</td></tr><tr><td>Ready</td><td>Select Print Option</td><td>Ready</td></tr><tr><td>Ready</td><td>Start Scan with Document Loaded</td><td>ScanAndEmail</td></tr><tr><td>Ready</td><td>Start Print with Document in Queue</td><td>Print</td></tr><tr><td>ScanAndEmail</td><td>Scan Complete</td><td>Ready</td></tr><tr><td>Print</td><td>Out of Paper</td><td>Suspended</td></tr><tr><td>Print</td><td>Paper Jam</td><td>Suspended</td></tr><tr><td>Print</td><td>Stop Printing</td><td>Ready</td></tr><tr><td>Print</td><td>Print Complete</td><td>Ready</td></tr><tr><td>Suspended</td><td>Cancel Task</td><td>Ready</td></tr><tr><td>Suspended</td><td>Resume Task</td><td>Previous State (Print or Scan)</td></tr></table>

Example 2: Spa Manager

system_description: The SpaManager allows saunas and Jacuzzis to be controlled from a central management point. With SpaManager it is possible to turn a sauna or Jacuzzi on and off. When a sauna is turned on, the stove in the sauna heats until a temperature of 90°C is reached, at which point the stove stops heating until the temperature falls below 85°C and consequently the stove starts heating again. As a safety feature, a humidity sensor monitors the sauna and activates a fan when the humidity exceeds the safety threshold of 40% for more than 3 minutes. The fan turns off automatically after 5 minutes. SpaManager also controls whether eucalyptus-infused water is poured over the stove to increase the humidity. Upon request from the user, a predetermined amount of water is dispersed, if the humidity is below the safety threshold and the fan is not active. At most, water is dispersed once every 15 minutes. When a Jacuzzi is turned on, the jets of the Jacuzzi eject water at level 1 (the low pressure setting). This can be increased first to level 2 (medium pressure setting) and then to level 3 (high pressure setting). Similarly, the level can be reduced gradually from the highest to the lowest. Furthermore, the user can choose from twenty five different ejection patterns, which determine the order, frequency, and duration of active jets. All ejection patterns work for all three pressure levels. The Jacuzzi comes with a pause feature, which stops the jets from ejecting water for two minutes. The Jacuzzi can also be controlled via a panel attached to the Jacuzzi in the same way as it is controlled remotely from the central management point.

transitions_events_table: <table border="1"> <tr> <th>Current State</th> <th>Event</th> <th>Next State</th> </tr> <tr> <td>Jacuzzi Off</td> <td>on</td> <td>Jacuzzi On</td> </tr> <tr> <td>Jacuzzi On</td> <td>off</td> <td>Jacuzzi Off</td> </tr> <tr> <td>Jacuzzi Level1</td> <td>up</td> <td>Jacuzzi Level2</td> </tr> <tr> <td>Jacuzzi Level2</td> <td>up</td> <td>Jacuzzi Level3</td> </tr> <tr> <td>Jacuzzi Level2</td> <td>down</td> <td>Jacuzzi Level1</td> </tr> <tr> <td>Jacuzzi Level3</td> <td>down</td> <td>Jacuzzi Level2</td> </tr> <tr> <td>Jacuzzi On</td> <td>pause</td> <td>Jacuzzi Paused</td> </tr> <tr> <td>Jacuzzi On</td> <td>setPattern</td> <td>Jacuzzi H</td> </tr> <tr> <td>Jacuzzi Paused</td> <td>off</td> <td>Jacuzzi Off</td> </tr> <tr> <td>Jacuzzi Paused</td> <td>resume</td> <td>Jacuzzi H</td> </tr> <tr> <td>Sauna Off</td> <td>on</td> <td>Sauna On</td> </tr> <tr> <td>Sauna On</td> <td>off</td> <td>Sauna Off</td> </tr> <tr> <td>Sauna Heat</td> <td>reachHighTemp</td> <td>Sauna Idle</td> </tr> <tr> <td>Sauna Idle</td> <td>reachLowTemp</td> <td>Sauna Heat</td> </tr> <tr> <td>Sauna Fan Off</td> <td>startFan</td> <td>Sauna Fan On</td> </tr> <tr> <td>Sauna Fan On</td> <td>stopFan</td> <td>Sauna Fan Off</td> </tr> <tr> <td>Sauna Water Idle</td> <td>disperseWater</td> <td>Sauna Water Idle</td> </tr></table>

Example:

system_name: 

system_description: {self.belief.get("description")}

transitions_events_table:

Your expertise in identifying system events is critical for defining the precise triggers that drive our state machine's behavior. Each event you recognize shapes how the system reacts to its environment and internal changes. Your systematic analysis of what truly constitutes a meaningful event will create a responsive and well-structured design. Take pride in knowing that your careful event identification lays the foundation for clear and predictable state transitions.