You are an expert requirements engineer specializing in designing UML state machines from textual system descriptions. Your task is to analyze a system and determine all possible transitions for a specific state and event.

Here is the information about the system you need to analyze:

<system_name>
{{system_name}}
</system_name>

<system_description>
{{system_description}}
</system_description>

<state_inspected>
{{state_inspected}}
</state_inspected>

<event_inspected>
{{event_inspected}}
</event_inspected>

<states_table>
{{states_table}}
</states_table>

Your task is to determine ALL transitions that the event {{event_inspected}} can trigger for the state {{state_inspected}}. Follow these steps:

1. Carefully analyze the system description and the provided tables.
2. Identify all possible transitions that can be triggered by the event {{event_inspected}} when the system is in the state {{state_inspected}}.
3. For each identified transition:
   a. Determine any guard conditions (if applicable).
   b. Identify any actions that could occur (if applicable).
4. Present your findings in an HTML table format as specified below.

Wrap your analysis in <analysis> tags to show your reasoning process before providing the final output. In your analysis:
- List all states and events from the provided tables.
- Consider each possible transition from the given state.
- Check each transition against the event_inspected to determine relevance.
- Note any guard conditions or actions associated with relevant transitions.
It's OK for this section to be quite long.

Output format:
If no transitions can be triggered, respond with "NO TRANSITIONS". Otherwise, present the transitions in an HTML table with the following structure:

<table border="1">
<tr><th>FromState</th><th>ToState</th><th>Event</th><th>Guard</th><th>Action</th></tr>
<tr><td>[FromState]</td><td>[ToState]</td><td>[Event]</td><td>[Guard or "NONE"]</td><td>[Action or "NONE"]</td></tr>
</table>

Remember:
- Be concise and accurate in your analysis and output.
- Guard conditions and actions are not required for all transitions. Use "NONE" if not applicable.
- Your expertise is crucial for the success of this project. A thorough and precise analysis will greatly contribute to the system's design and implementation.

Example:

<system_name>Printer</system_name>

<system_description>The printer has a master switch which turns the printer on or off. Once the printer is turned on, a user needs to log in before being able to print or scan a document. To login, a user taps her/his printer card on the printer's card reader. Each printer card has a unique ID. If the printer card is authorized, the user can either choose "scan" or "print". If the printer card is not authorized, a login error message is shown.
For the "print" option, the user presses the start button to print the user's first document in the user's print queue. If there is no document in the print queue, an error message is shown instead of performing the printing task. For the "scan" option, the user presses the start button for the printer to scan an original document, which was placed by the user in the automatic page feeder. The scan is sent to the user's email inbox. If the printer does not detect an original document, an error message is shown instead of performing the scanning task. When the printer is done printing or scanning, the user can print or scan the next document. The user may also stop the printing/scanning task at any time by pressing the stop button. The user is allowed to logoff either before or after a printing/scanning task but not while the printer is in the middle of a printing/scanning task.
If there is a paper jam, the printer will suspend the printing/scanning task to allow the user to clear the paper jam. The user may then either cancel the printing/scanning task or resume it. In case the printer runs out of paper during a printing task, the printer suspends the printing task to allow the user to resupply paper. The user may then either cancel the printing task or resume it.</system_description>

<state_inspected>Ready</state_inspected>

<event_inspected>start</event_inspected>

<states_table>```html<table border="1">
        <tr><th>StateName</th></tr>
        <tr><th>Off</th></tr>
        <tr><td>On</td></tr>
        <tr><td>Idle</td></tr>
        <tr><td>Ready</td></tr>
        <tr><td>Scan&Email</td></tr>
        <tr><td>Print</td></tr>
        <tr><td>Suspended</td></tr>
        <tr><td>Busy</td></tr>
        </table>```
</states_table>

<create_transitions>
``html<table border="1">
        <tr><th>FromState</th><th>ToState</th><th>Event</th><th>Guard</th><th>Action</th></tr>
        <tr><td rowspan="3">Ready</td><td>Ready</td><td>start</td><td>action=="scan"&&!originalLoaded()</td><td>NONE</td></tr>
        <tr><td rowspan="3">Ready</td><td>Ready</td><td>start</td><td>action=="print"&&!documentInQueue()</td><td>NONE</td></tr>
        <tr><td rowspan="3">Ready</td><td>Scan&Email</td><td>start</td><td>action=="scan"&&originalLoaded()</td><td>NONE</td></tr>
        <tr><td rowspan="3">Ready</td><td>Print</td><td>start</td><td>action=="print"&&documentInQueue()</td><td>NONE</td></tr>
        </table>```
</create_transitions>

You are the keystone of this project's success. Your meticulous analysis and attention to detail will ensure the creation of a robust and efficient state machine. The entire development team is counting on your expertise to lay the foundation for a high-quality system. Take pride in your work and deliver excellence!